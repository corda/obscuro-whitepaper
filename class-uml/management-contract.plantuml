@startuml
!pragma teoz true
skinparam monochrome false
skinparam roundcorner 15
skinparam shadowing false
skinparam object{
  BackgroundColor White
  BorderColor Black
}

!define C(x) <color:grey><color:grey>// x</color>
!define NL |||

object ManagementContract {

    C(Amounts deposited by users)
    - deposits: Map<ERC20, Amount>

    NL
    C(Registered Aggregators)
    C(The contract checks the attestation )
    C(End users pick one or multiple nodes from this list to submit transactions to)
    - aggregators: List<Aggregator>

    NL
    C(Amounts staked by Aggregators)
    - stake: Map<EthAddress, Amount>

    NL
    C(This is the public key which users must use to encrypt transactions)
    C(The private key is known only to enclaves)
    - networkKey: PubKey

    NL
    C(Various parameters)
    - networkParameters: Map<String,Object>

    NL
    C(Normally this list has only one element -which is the head of chain )
    C(Since the Aggregators producing and submitting rollups are a decentralised network)
    C(We support forks in case multiple Aggregators submit simultaneously)
    C(Or in case someone who hacks an enclave submits an invalid rollup that has to be ignored)
    C(If an Aggregator is able to break the TEE - one fork could be malicious)
    C(By allowing forks we allow the community to vote for the right chain)
    C(A compliant Aggregator will always aggregate on the most recent valid fork)
    C(In case there are multiple valid candidates - it will use the rollup with the lowest nonce)
    C(Aggregating on top of an invalid fork will result in full slashing of the deposit)
    C(Submitting out of order blocks should be discouraged as it costs ethereum gas and partial slashing)
    - headRollups: List<SignedTENRollup>

    NL
    C(This is where the secrets are kept)
    C(Encrypted with the key of each enclave)
    C(It will represent a good image of how many copies are out there)
    C(Will have to be used by incentives)
    C(Users will have to remove when they destroy the cpu)
    - encryptedSecrets: Map<Party,Secret>
}

object Aggregator{
    - attestation: Attestation[PubKey, Proof]
    - internetAddress: URL or Address[IP, port]
    - ethAddress: EthAddress
}
@enduml